#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

# debug
#set -x

# clean up leaking environment
unset GIT_DIR

# absolute path
BIN_DIR=$(cd $(dirname $0); pwd)

# parse args
BUILD_DIR=$1
CACHE_DIR=$2

# bundled gems
BUNDLE_CACHE=$CACHE_DIR/vendor/bundle
BUNDLE_DIR=$BUILD_DIR/vendor/bundle

# JRuby options
JRUBY_OPTS="--1.9 -J-Xmx400m"
VERSION="1.6.7"

function indent {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

function download_jruby_and_install_default_gems {
  if [ ! -d "$CACHE_DIR/jruby-$VERSION" ]; then
    echo "-----> Downloading and unpacking JRuby"
    mkdir -p $CACHE_DIR
    JRUBY_TAR=http://jruby.org.s3.amazonaws.com/downloads/$VERSION/jruby-bin-$VERSION.tar.gz
    curl $JRUBY_TAR -s -o - | tar xzf - -C $CACHE_DIR/
    PATH=$CACHE_DIR/jruby-$VERSION/bin:$PATH

    echo "-----> Installing JRuby-OpenSSL, Bundler and Rake"
    jruby $JRUBY_OPTS -S jgem install jruby-openssl bundler rake | indent
  fi
}

function copy_jruby_to_build {
  echo "-----> Vendoring JRuby into slug"
  cp -ru $CACHE_DIR/jruby-$VERSION $BUILD_DIR/jruby
  PATH=$BUILD_DIR/jruby/bin:$PATH
}

function get_bundle_cache {
  if [ -d $BUNDLE_CACHE ]; then
    echo "-----> Getting bundle cache"
    mkdir -p $BUNDLE_DIR
    cp -ru $BUNDLE_CACHE/* $BUNDLE_DIR
  fi
}

function store_bundle_cache {
  echo "-----> Storing bundle cache"
  mkdir -p $BUNDLE_CACHE
  cp -ruf $BUNDLE_DIR/* $BUNDLE_CACHE
}

function bundle_install {
  echo "-----> Installing dependencies with Bundler"

  cd $BUILD_DIR
  jruby $JRUBY_OPTS -r openssl -S bundle install --without development:test --binstubs --deployment | indent

  echo "Dependencies installed" | indent
}

function bundle_install_with_cache {
  get_bundle_cache
  bundle_install
  store_bundle_cache
}

download_jruby_and_install_default_gems
copy_jruby_to_build
bundle_install_with_cache

# ----------------
# Maven build part
# ----------------

KEEP_M2_CACHE="true"

if [ ! -d $CACHE_DIR ]; then
  KEEP_M2_CACHE="false"
elif [ -f $CACHE_DIR/removeM2Cache ]; then
  KEEP_M2_CACHE="false"
fi

if [ "true" == $KEEP_M2_CACHE ]; then
  logger -p user.notice -t "slugc[$$]" "language_pack_java retain_m2_repo"
fi

# change to cache dir to install maven
cd $CACHE_DIR

# install maven with base repository
MAVEN_URL="http://s3.amazonaws.com/heroku-jvm-langpack-java/maven.tar.gz"

if [ ! -d .maven ]; then
echo -n "-----> Installing Maven 3.0.3....."
  curl --silent --max-time 60 --location $MAVEN_URL | tar xz
  chmod +x .maven/bin/mvn
  echo " done"
fi

# copy maven settings file
MAVEN_SETTINGS_URL="http://s3.amazonaws.com/heroku-jvm-langpack-java/settings.xml"

echo -n "-----> Installing settings.xml....."
if [ -f .m2/settings.xml ]; then
  rm .m2/settings.xml
fi

curl --silent --max-time 10 --location $MAVEN_SETTINGS_URL --output .m2/settings.xml
echo " done"

# change to build dir to run maven
cd $BUILD_DIR/app/java

export MAVEN_OPTS="-Xmx512m"

# build app
BUILDCMD="$CACHE_DIR/.maven/bin/mvn -B -Duser.home=$BUILD_DIR/app/java -Dmaven.repo.local=$CACHE_DIR/.m2/repository -s $CACHE_DIR/.m2/settings.xml -DskipTests=true clean install"
echo "-----> executing $BUILDCMD"

$BUILDCMD 2>&1 | indent

if [ "${PIPESTATUS[*]}" != "0 0" ]; then
  echo " ! Failed to build app with Maven"
  exit 1
fi

# finalize cache
if [ "false" == $KEEP_M2_CACHE ]; then
  touch $CACHE_DIR/removeM2Cache
fi

#copy .m2 and .maven if needed
if [ "true" == $KEEP_M2_CACHE ]; then
  for DIR in ".m2" ".maven" ; do
    cp -r $CACHE_DIR/$DIR $DIR
  done
fi
